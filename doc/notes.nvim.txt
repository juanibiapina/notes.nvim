*notes.txt*	Note-taking plugin for Neovim		*notes.nvim*

Author:  Juan Ibiapina
License: Same terms as Vim itself (see |license|)

INTRODUCTION						*notes-introduction*

This plugin provides functionality for note-taking in Neovim with support for:
- Opening links in Obsidian-style double brackets format `[[filename]]`
- Moving completed items to daily files (compatible with Obsidian daily notes)
- Creating and managing tasks with checkboxes
- Renaming notes and updating all references throughout the project

The plugin is written in Lua and exposes both commands and Lua functions for
programmatic access.

REQUIREMENTS						*notes-requirements*

ripgrep							*notes-ripgrep*
	Used for finding references to notes.
	
	Install ripgrep using your system package manager:
	- Ubuntu/Debian: `apt install ripgrep`
	- macOS with Homebrew: `brew install ripgrep`
	- Arch Linux: `pacman -S ripgrep`
	- Check https://github.com/BurntSushi/ripgrep for more installation options.

COMMANDS						*notes-commands*

:NotesOpen {filename}					*:NotesOpen*
	Open the specified file for editing. Automatically appends `.md` 
	extension if not already present. Creates the file with a header
	if it doesn't exist.
	
	Examples: >
		:NotesOpen myNote      " Opens myNote.md
		:NotesOpen file.md     " Opens file.md (unchanged)
<

:NotesOpenCurrent					*:NotesOpenCurrent*
	Opens a link based on the current cursor position:
	- If cursor is on an Obsidian-style link `[[filename]]`, opens that file
	- If multiple links exist on the line, opens the one under the cursor
	- Automatically appends `.md` extension to filenames
	- Does nothing if no Obsidian links are found

:NotesDailyToday					*:NotesDailyToday*
	Opens today's daily file:
	- Opens file in format `daily/YYYY-MM-DD.md`
	- Creates the file with a header if it doesn't exist
	- Creates the daily directory if it doesn't exist
	- Compatible with Obsidian daily notes format

:NotesTaskNew						*:NotesTaskNew*
	Creates a new empty task on the next line:
	- Inserts `- [ ] ` on the line below the cursor
	- Positions cursor at the end for immediate editing
	- Works from any line in the buffer

:NotesTaskToggle					*:NotesTaskToggle*
	Toggles task completion status:
	- Changes `- [ ]` to `- [x]` (marks task as done)
	- Changes `- [x]` to `- [ ]` (marks task as not done)
	- Works with indented tasks
	- Does nothing if current line is not a task

:NotesMagic						*:NotesMagic*
	Smart command that behaves contextually based on cursor position:
	1. If cursor is on an Obsidian-style link `[[filename]]`, follows the link
	2. Otherwise, if current line is a task, toggles the task completion
	3. Otherwise, if there's exactly one Obsidian-style link on a non-task line,
	   follows the link regardless of cursor position
	4. Otherwise, does nothing
	
	This command works well when assigned to a hotkey like "Enter" for
	context-aware note navigation and task management.

:NotesRename {new_title}				*:NotesRename*
	Rename the current note file, header and all references:
	- Renames the current note to the new title
	- Updates the header if it matches the old title
	- Finds and updates all Obsidian-style references `[[old_title]]` to `[[new_title]]`
	- Requires ripgrep
	- Prevents overwriting existing files
  - `.md` extension must not be included in the new title
	
	Examples: >
		:NotesRename "My New Title"    " Renames current note to "My New Title.md"
		:NotesRename new-note       " Renames to "new-note.md"
<

:NotesDelete						*:NotesDelete*
	Delete the current note if no references to it exist:
	- Safely deletes the current note file only if no other notes reference it
	- Uses ripgrep to find all `[[note_name]]` references throughout the project
	- Prevents accidental deletion of notes that would create broken links
	- Requires ripgrep
	- Only works on markdown files (`.md` extension)
	- Closes the buffer after successful deletion
	
	If references are found, displays the list of files containing references
	and refuses to delete the note.
	
	Examples: >
		:NotesDelete                " Deletes current note if safe to do so
<

LUA FUNCTIONS						*notes-functions*

All commands are also available as Lua functions for programmatic access:

require('notes').notes_open({filename})			*notes.notes_open()*
	Lua equivalent of `:NotesOpen` command.

require('notes').open_current()				*notes.open_current()*
	Lua equivalent of `:NotesOpenCurrent` command.

require('notes').daily_today()				*notes.daily_today()*
	Lua equivalent of `:NotesDailyToday` command.

require('notes').task_new()				*notes.task_new()*
	Lua equivalent of `:NotesTaskNew` command.

require('notes').task_toggle()				*notes.task_toggle()*
	Lua equivalent of `:NotesTaskToggle` command.

require('notes').magic()				*notes.magic()*
	Lua equivalent of `:NotesMagic` command.

require('notes').notes_rename({new_title})		*notes.notes_rename()*
	Lua equivalent of `:NotesRename` command.

require('notes').notes_delete()				*notes.notes_delete()*
	Lua equivalent of `:NotesDelete` command.

require('notes').find_references({note_name})		*notes.find_references()*
	Find all files that reference the given note name using ripgrep.
	Returns a table with file references containing:
	  - file: string - the file path containing the reference
	  - line: number - the line number where the reference was found  
	  - text: string - the full text of the line containing the reference
	
	Requires ripgrep to be installed and available in PATH.
	Throws an error if ripgrep is not available.
	
	Example: >
		local refs = require('notes').find_references('my-note')
		for _, ref in ipairs(refs) do
		  print(ref.file .. ':' .. ref.line .. ' - ' .. ref.text)
		end
<

MAPPINGS						*notes-mappings*

The plugin does not set any default mappings. You can create your own: >

	" Example mappings using commands
	nmap <leader>no :NotesOpenCurrent<CR>
	nmap <leader>nt :NotesTaskNew<CR>
	nmap <leader>ng :NotesTaskToggle<CR>
	nmap <CR> :NotesMagic<CR>

	" Example mappings using Lua functions
	nnoremap <leader>no <cmd>lua require('notes').open_current()<CR>
	nnoremap <leader>nt <cmd>lua require('notes').task_new()<CR>
	nnoremap <leader>ng <cmd>lua require('notes').task_toggle()<CR>
	nnoremap <CR> <cmd>lua require('notes').magic()<CR>
<

For backward compatibility, <Plug> mappings are still available: >
	" Legacy <Plug> mappings (still supported)
	nmap <leader>no <Plug>NotesOpenCurrent
<

USAGE EXAMPLES						*notes-examples*

Opening links:
	Place cursor on any `[[filename]]` link and use `:NotesOpenCurrent`
	to open `filename.md`

Creating tasks:
	Use `:NotesTaskNew` to create a new task `- [ ] ` on the next line,
	with cursor positioned for immediate editing. The command automatically
	enters insert mode so you can start typing the task description.

Managing tasks:
	Place cursor on a task line and use `:NotesTaskToggle` to toggle
	between `- [ ]` (not done) and `- [x]` (done)

Smart context-aware command:
	Use `:NotesMagic` for context-aware behavior:
	- When cursor is on `[[link]]`: follows that link
	- On `- [ ] task` line (when not on a link): toggles task completion
	- On non-task line with exactly one `[[link]]`: follows the link (regardless of cursor position)
	- Otherwise: does nothing
	
	Perfect for mapping to Enter key for intuitive navigation

Multiple links on one line:
	If a line contains `[[link1]] and [[link2]]`, the plugin will open
	the link where your cursor is positioned. If only one link exists
	on a non-task line, it will be followed regardless of cursor position.

ABOUT							*notes-about*

Grab the latest version or report a bug on GitHub:
http://github.com/juanibiapina/notes.nvim

 vim:tw=78:et:ft=help:norl:
